@{
    Layout = "";
}

@using DataModels
@using DataModels.Questions
@using WBK.Models.Create
@model WBK.Models.Create.SurveyViewModel

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WijkBeweegKaart</title>

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"></script>

    <script src="~/lib/jquery/dist/jquery.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
    <link rel="stylesheet" href="~/css/site.css" />
</head>

<body class="p-0">
    <nav class="navbar navbar-light" style="background-color: #F9A11B;">
        <a class="navbar-brand" href="#">
            <img src="~/images/WijkBeweegKaart Logo.png" alt="WijkBeweegKaart" style="height: 80px; width: 360px;" />
        </a>
    </nav>
    <div class="container-fluid">
        <div class="">
            <h1>Enquête Aanmaken:</h1>
            @using (Html.BeginForm("Survey", "Create", FormMethod.Post, new { @class = "row" }))
            {
                @Html.AntiForgeryToken()

            <div class="col-6 form-group" style="margin-top: 20px;">
                <div>
                    <label>Titel:</label>
                    @Html.TextBoxFor(x => x.Title, new { required = "required", @class = "form-control" })
                </div>
                <div>
                    <label>Beschrijving:</label>
                    @Html.TextAreaFor(x => x.Description, new { rows = "10", cols = "80", @class = "form-control" })
                </div>
                <div>
                    <label>Foto URL:</label>
                    @Html.TextBoxFor(x => x.ImageUrl, new { @class = "form-control" })
                </div>
                <div>
                    <label>Eind Datum:</label>
                     @Html.TextBoxFor(model => model.EndDate, new { required = "required", @class = "form-control" })
                </div>

                <input type="submit" name="name" value="Maak Aan!" class="btn btn-success" />

            </div>

                <div class="col-6 form-group">
                    <h2>Pagina's en vragen:</h2>
                    <div id="InputsWrapper">
                        @for (var i = 0; i < Model.PagesList.Count(); i++)
                        {
                            <div class="pageDiv" style="border-style: solid; border-color: orange; border-width: 3px; border-radius: 5px; padding: 5px">
                                <label style="display: none;" class="boolFirstGeoQuestion">true</label>
                                <div>
                                    <h3 style="float: left;">Pagina @i</h3>

                                    <div style="float: right;" class="dropleft show">
                                        <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuPage@(i)" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            =
                                        </a>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                                            <a href="" class="dropdown-item addProfileQuestionButton">Voeg Profiel Vragen Toe</a>
                                            <a href="" class="dropdown-item addNNGBQuestionButton">Voeg NNGB vragen Toe</a>
                                            <a href="" class="dropdown-item addMotivationQuestionButton">Voeg Motivatie vragen Toe</a>
                                            <div class="dropdown-divider"></div>
                                            <a style="color: red" href="" class="dropdown-item removeclass">Pagina verwijderen</a>
                                        </div>
                                    </div>

                                </div>
                                @Html.TextBoxFor(x => x.PagesList[i].Title, new {placeholder = "Pagina Titel", required = "required", @class = "form-control"})
                                @Html.ValidationMessageFor(x => x.PagesList[i].Title)

                                @Html.TextBoxFor(x => x.PagesList[i].ImageUrl, new {placeholder = "Foto URL", @class = "form-control"})

                                @Html.TextAreaFor(x => x.PagesList[i].Description, new {placeholder = "Pagina Beschrijving", rows = "5", cols = "40", @class = "form-control"})
                                @Html.ValidationMessageFor(x => x.PagesList[i].Description)

                                @Html.Label("PageCounter", i.ToString(), new {style = "display: none;"})

                                <div class="QuestionWrapper" style="margin-top: 10px;">

                                    @for (var j = 0; j < Model.PagesList[i].Questions.Count(); j++)
                                    {
                                        <div class="questionDiv">
                                            <h3 style="float: left;">Vraag @j</h3>

                                            <div style="float: right;" class="dropleft show">
                                                <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuQuestion@(j)" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    =
                                                </a>
                                                <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                                                    <a style="color: red;" href="" class="removeQuestionClass">Vraag verwijderen</a>
                                                </div>
                                            </div>

                                            @Html.TextBoxFor(x => x.PagesList[i].Questions[j].Title, new {placeholder = "Vraag", required = "required", @class = "form-control"})
                                            @Html.TextBoxFor(x => x.PagesList[i].Questions[j].Description, new {placeholder = "Vraag Beschrijving", required = "required", @class = "form-control"})
                                            @Html.TextBoxFor(x => x.PagesList[i].Questions[j].ImageUrl, new {placeholder = "Foto URL", @class = "form-control"})
                                            @Html.DropDownListFor(x => x.PagesList[i].Questions[j].Type, Html.GetEnumSelectList(Model.PagesList[i].Questions[j].Type.GetType()), new {@class = "form-control"})
                                            @Html.DropDownListFor(x => x.PagesList[i].Questions[j].Category, Html.GetEnumSelectList(Model.PagesList[i].Questions[j].Category.GetType()), new {@class = "form-control"})

                                            @Html.Label("QuestionCounter", j.ToString(), new {style = "display: none;"})

                                            <div class="question">
                                                @switch (Model.PagesList[i].Questions[j].Type)
                                                {
                                                    case TypeEnum.GeoVraag:
                                                        <label>Marker Type:</label>
                                                        @Html.DropDownListFor(x => x.PagesList[i].Questions[j].GeoType, Html.GetEnumSelectList(Model.PagesList[i].Questions[j].GeoType.GetType()), new {@class = "form-control"})
                                                        break;
                                                    case TypeEnum.SliderVraag:
                                                        <label>Tekst aan begin slider:</label>
                                                        @Html.TextBoxFor(x => x.PagesList[i].Questions[j].SliderMinText, new {@class = "form-control"})
                                                        ;
                                                        <label>Tekst aan eind slider:</label>
                                                        @Html.TextBoxFor(x => x.PagesList[i].Questions[j].SliderMaxText, new {@class = "form-control"})
                                                        ;
                                                        <label>Max waarde:</label>
                                                        @Html.EditorFor(x => x.PagesList[i].Questions[j].SliderScaleVal, new {@class = "form-control"})
                                                        ;
                                                        <p>(De begin waarde is altijd 0. Het getal dat hierboven ingevuld wordt is de maximale waarde.)</p>
                                                        break;
                                                    case TypeEnum.NummerVraag:
                                                        <label>Minimum waarde</label>
                                                        @Html.EditorFor(x => x.PagesList[i].Questions[j].MinValue, new {@class = "form-control"})
                                                        ;
                                                        <label>Maximum waarde</label>
                                                        @Html.EditorFor(x => x.PagesList[i].Questions[j].MaxValue, new {@class = "form-control"})
                                                        ;
                                                        break;
                                                    case TypeEnum.MeerkeuzeVraag:
                                                        @Html.CheckBoxFor(x => x.PagesList[i].Questions[j].AllowMultipleAnswers, new {@class = "form-check"})
                                                        ;

                                                        for (int q = 0; q < Model.PagesList[i].Questions[j].Options.Count; q++)
                                                        {
                                                            <label>Antwoord:</label>
                                                            <input class="form-control" id="PagesList_@i+__Questions_@j+__Options_@q+__Answer" name="PagesList[@i+].Questions[@j+].Options[@q+].Answer" type="text" value="@Model.PagesList[i].Questions[j].Options[q].Answer"/>
                                                            <label>Eventuele beschrijving:</label>
                                                            <input class="form-control" id="PagesList_@i+__Questions_@j+__Options_@q+__Description" name="PagesList[@i+].Questions[@j+].Options[@q+].Description" type="text" value="@Model.PagesList[i].Questions[j].Options[q].Description"/>
                                                            <label>Foto URL:</label>
                                                            <input class="form-control" id="PagesList_@i+__Questions_@j+__Options_@q+__ImageUrl" name="PagesList[@i+].Questions[@j+].Options[@q+].ImageUrl" type="text" value="@Model.PagesList[i].Questions[j].Options[q].ImageUrl"/>
                                                        }
                                                        break;
                                                }
                                            </div>
                                        </div>

                                    }

                                </div>

                                <div style="margin-top: 10px;" class="addQuestion">
                                    <a href="" class="addQuestionButton btn btn-info">Voeg Vraag Toe</a>
                                </div>


                            </div>

                        }
                    </div>

                    <div id="AddMoreFileId">
                        <a href="" id="AddMoreFileBox" class="btn btn-info">Voeg Pagina Toe</a><br><br>
                    </div>

                </div>

            }

        </div>

    </div>

    <script type="text/javascript">

        $(document).ready(function () {

            $('#EndDate').datepicker({ dateFormat: "dd-mm-yy", minDate: -0 });

            $('.dropdown-toggle').dropdown();
    

        function appendToDiv(parentDiv, url, pageNumber, questionNumber, optionNumber) {
            url = url.replace("pageNumberJS", pageNumber);
            url = url.replace("questionNumberJS", questionNumber);
            url = url.replace("optionNumberJS", optionNumber);
            url = url.replace(/&amp;/g, '&');
            $.ajax({
                type: "GET",
                url: url,
                success: function (text) {
                    $(parentDiv).append(text);
                }
            });
        }

            $("body").on("change",
                "select",
                function(e) {
                    if (this.id.includes("Type")) {
                        var parentDiv = $(this).parent();
                        parentDiv.children('.question').empty();
                        var str = this.id;
                        var indexOfPage = str.indexOf("t_");
                        var indexOfQeustions = str.indexOf("s_");
                        var pageNumber = str.charAt(indexOfPage + 2);
                        var questionNumber = str.charAt(indexOfQeustions + 2);
                        var url = "";
                        switch (parseInt(this.value)) {
                            case 0:
                                if (parentDiv.parent().parent().children("label")[0].innerHTML == "true") {
                                    url =
                                        '@Url.Action("GeoQuestion","Create", new { pageId = "pageNumberJS", questionId = "questionNumberJS", firstGeoQuestionInPage = true})';
                                    parentDiv.parent().parent().children("label")[0].innerHTML = false;
                                } else {
                                    url =
                                        '@Url.Action("GeoQuestion","Create", new { pageId = "pageNumberJS", questionId = "questionNumberJS", firstGeoQuestionInPage = false})';
                                }
                            appendToDiv(parentDiv.children('.question'), url, pageNumber, questionNumber);
                            break;
                        case 1:
                            url =
                                '@Url.Action("MultipleChoiceQuestion","Create", new { pageId = "pageNumberJS", questionId = "questionNumberJS"})';
                            appendToDiv(parentDiv.children('.question'), url, pageNumber, questionNumber);
                            break;
                        case 3:
                            url =
                                '@Url.Action("SliderQuestion","Create", new { pageId = "pageNumberJS", questionId = "questionNumberJS"})';
                            appendToDiv(parentDiv.children('.question'), url, pageNumber, questionNumber);
                            break;
                        case 4:
                            url =
                                '@Url.Action("NumberQuestion","Create", new { pageId = "pageNumberJS", questionId = "questionNumberJS"})';
                            appendToDiv(parentDiv.children('.question'), url, pageNumber, questionNumber);
                            break;
                        }

                    }

        });


        var profileQuestionsUsed = false;
        var nngbQuestionsUsed = false;
        var motivationQuestionsUsed = false;


        //Pagina
        var MaxInputsPage = 10;
        var InputsWrapper = $("#InputsWrapper");
        var AddButtonPage = $("#AddMoreFileBox");
        var x = InputsWrapper.length;
        $(AddButtonPage).click(function (e) {
            e.preventDefault();
            var currentPageCount = $('.pageDiv').length;
            if (x <= MaxInputsPage) {
                var url = '@Url.Action("PageView","Create", new { pageId = "pageNumberJS"})';
                url = url.replace("pageNumberJS", currentPageCount);
                url = url.replace(/&amp;/g, '&');
                $.ajax({ type: "GET",
                    url: url ,
                    success: function (text) {

                        if (profileQuestionsUsed) {
                            text = $(text).find('.addProfileQuestionButton').remove().end();
                        }

                        if (nngbQuestionsUsed) {
                            text = $(text).find('.addNNGBQuestionButton').remove().end();
                        }

                       if (motivationQuestionsUsed) {
                            text = $(text).find('.addMotivationQuestionButton').remove().end();
                        }

                        $(InputsWrapper).append(text);
                    }
                });


                x++;
                $("#AddMoreFileId").show();
                $('AddMoreFileBox').html("Add field");
                if (x == MaxInputsPage) {
                    $("#AddMoreFileId").hide();
                }
            }
            return false;
        });

        $("body").on("click", ".addProfileQuestionButton", function(e) {
            e.preventDefault();
            var pageNumber = $(this).parent().parent().parent().parent().children("label")[0].innerHTML;
            var questionWrapper = $(this).parent().parent().parent().parent().children(".QuestionWrapper");
            var currentQuestionCount = $(questionWrapper).children(".questionDiv").length;
            var url = '@Url.Action("ProfileQuestions","Create", new { pageId = "pageNumberJS", questionId = "questionNumberJS"})';
            appendToDiv(questionWrapper, url, pageNumber, currentQuestionCount);
            profileQuestionsUsed = true;
            $(".addProfileQuestionButton").hide();
        });

        $("body").on("click", ".addNNGBQuestionButton", function(e) {
            e.preventDefault();
            var pageNumber = $(this).parent().parent().parent().parent().children("label")[0].innerHTML;
            var questionWrapper = $(this).parent().parent().parent().parent().children(".QuestionWrapper");
            var currentQuestionCount = $(questionWrapper).children(".questionDiv").length;
            var url = '@Url.Action("NngbQuestions","Create", new { pageId = "pageNumberJS", questionId = "questionNumberJS"})';
            appendToDiv(questionWrapper, url, pageNumber, currentQuestionCount);
            nngbQuestionsUsed = true;
            $(".addNNGBQuestionButton").hide();
        });

        $("body").on("click", ".addMotivationQuestionButton", function(e) {
            e.preventDefault();
            var pageNumber = $(this).parent().parent().parent().parent().children("label")[0].innerHTML;
            var questionWrapper = $(this).parent().parent().parent().parent().children(".QuestionWrapper");
            var currentQuestionCount = $(questionWrapper).children(".questionDiv").length;
            var url = '@Url.Action("MotivationQuestions","Create", new { pageId = "pageNumberJS", questionId = "questionNumberJS"})';
            appendToDiv(questionWrapper, url, pageNumber, currentQuestionCount);
            motivationQuestionsUsed = true;
            $(".addMotivationQuestionButton").hide();
        });

        $("body").on("click",
            ".removeclass",
            function (e) {
                e.preventDefault();
                if (x > 1) {
                    $(this).parent().parent().parent().parent('div').remove(); 
                    x--; 
                    var i;
                    var pages = $('.pageDiv').toArray();
                    var counters = $('.pageDiv label[for=PageCounter]').toArray();
                    for (i = 0; i < pages.length; i++) {
                        var children = pages[i].children;
                        for (j = 0; j < children.length; j++) {
                            var child = children[j];
                            switch (child.tagName) {
                            case "H3":
                                child.innerHTML = "Pagina " + i;
                                break;
                            case "INPUT":
                                child.id = child.id.replace("PagesList_" + counters[i].innerHTML, "PagesList_" + i);
                                child.name = child.name.replace("PagesList[" + counters[i].innerHTML + "]",
                                    "PagesList[" + i + "]");
                                break;
                            case "LABEL":
                                child.innerHTML = i;
                                break;
                            default:
                            }
                        }
                    };
                    $("#AddMoreFileId").show();
                    // Adds the "add" link again when a field is removed.
                    $('AddMoreFileBox').html("Add field");
                }
                return false;
            });

        $("body").on("click",".addQuestionButton",function (e) {
                e.stopPropagation();
                e.stopImmediatePropagation();
                e.preventDefault();
                var pageNumber = $(this).parent().parent().parent().children().length -1;
                var questionWrapper = $(this).parent().parent().children(".QuestionWrapper");
                var currentQuestionCount = $(questionWrapper).children(".questionDiv").length;
                var url = '@Url.Action("QuestionView", "Create", new { pageId = "pageNumberJS", questionId = "questionNumberJS"})';
                console.log(questionWrapper);
                console.log(url);
                console.log(pageNumber);
                appendToDiv(questionWrapper, url, pageNumber, currentQuestionCount);
        });

        $("body").on("click",
            ".removeQuestionClass",
            function (e) {
                e.preventDefault();
                var questionsWrapper = $(this).parent().parent().parent().parent();
                var i;
                var j;
                var q;
                if (questionsWrapper.children().length > 1) {
                    $(this).parent().parent().parent('div').remove();
                    var questions = questionsWrapper.children();
                    for (q = 0; q < questions.length; q++) {
                        var children = questions[q].children;
                        var oldNumber = children[5].innerHTML;
                        for (j = 0; j < children.length; j++) {
                            var child = children[j];
                            switch (child.tagName) {
                            case "H3":
                                child.innerHTML = "Vraag " + q;
                                break;
                            case "INPUT":
                                child.id = child.id.replace("Questions_" + oldNumber, "Questions_" + q);
                                child.name = child.name.replace("Questions[" + oldNumber + "]", "Questions[" + q + "]");
                                break;
                            case "SELECT":
                                child.id = child.id.replace("Questions_" + oldNumber, "Questions_" + q);
                                child.name = child.name.replace("Questions[" + oldNumber + "]", "Questions[" + q + "]");
                                break;
                            case "LABEL":
                                child.innerHTML = q;
                                break;
                            default:
                            }
                        }
                    }
                }
                return false;
            });

        $("body").on("click",
            ".addMCOption",
            function (e) {
                e.preventDefault();
                var wrapper = $(this).parent().parent().children()[0];
                var numberOfOptions = $(wrapper).children(".MCOption").length;
                var pageNumber = $(this).parent().parent().parent().parent().children().length - 1;
                var questionWrapper = $(this).parent().parent().parent().parent().parent().children(".QuestionWrapper");
                var currentQuestionCount = $(questionWrapper).children(".questionDiv").length - 1;
                var url = '@Url.Action("MultipleChoiceOption","Create", new { pageId = "pageNumberJS", questionId = "questionNumberJS", optionId="optionNumberJS"})';
                appendToDiv(questionWrapper, url, pageNumber, currentQuestionCount, numberOfOptions);
                return false;
            });

        $("body").on("click",
            ".removeMCOption",
            function (e) {
                e.preventDefault();
                var wrapper = $(this).parent().parent().parent().children()[0];
                $(this).parent('div').remove();
                var options = $(wrapper).children(".MCOption");
                var i;
                var q;
                for (i = 0; i < options.length; i++) {
                    var children = options[i].children;
                    var oldNumber = children[4].innerHTML;
                    children[4].innerHTML = i;
                    for (q = 0; q < children.length; q++) {
                        var child = children[q];
                        switch (child.tagName) {
                            case "INPUT":
                                child.id = child.id.replace("Options_" + oldNumber, "Options_" + i);
                                child.name = child.name.replace("Options[" + oldNumber + "]", "PagesList[" + i + "]");
                                break;
                            default:
                                break;
                        }
                    }
                }
                return false;
            });

    });


    </script>
</body>
</html>
